name: Test

on:
  pull_request:
    types:
      - opened
      - closed
    branches:
      - main
      - develop
      - release

env:
  BUILD_TYPE: Debug

jobs:
  test_opened_pull_request:
    if: github.event.action == 'opened'
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.head_ref }}

    - name: Get project name
      run: |
        echo "PROJECT_NAME=$(echo "${{ github.repository }}" | awk -F '/' '{print $2}')" >> $GITHUB_ENV

    - name: Configure
      run: |
        cmake -B build -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      run: |
        cmake --build build

    - name: Test
      run: cd ./build/$sub_project && ./$bin
      env:
        sub_project: tests
        bin: ${{ env.PROJECT_NAME }}_test

  test_merged_pull_request:
    if: github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.base.ref }}

    - name: Get project name
      run: |
        echo "PROJECT_NAME=$(echo "${{ github.repository }}" | awk -F '/' '{print $2}')" >> $GITHUB_ENV

    - name: Configure
      run: |
        cmake -B build -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      run: |
        cmake --build build

    - name: Test
      run: cd ./build/$sub_project && ./$bin
      env:
        sub_project: tests
        bin: ${{ env.PROJECT_NAME }}_test

    - name: Create coverage reports
      run: |
        cd ./build
        sudo apt-get install lcov
        lcov --capture --directory . --output-file coverage.info
        lcov --remove coverage.info '/usr/*' --output-file coverage.info
        lcov --remove coverage.info 'tests/*' --output-file coverage.info
        lcov --list coverage.info

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}